syntax="proto3";
package tdrpc;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option go_package = "git.coinninja.net/backend/thunderdome/tdrpc";

service ThunderdomeRPC {

    rpc GetAccount(google.protobuf.Empty) returns (Account) {
        option (google.api.http) = {
            get: "/account"
        };
    }

    // DecodeRequest
    rpc Decode(DecodeRequest) returns (DecodeResponse) {
        option (google.api.http) = {
            post: "/decode"
            body: "*"
        };
    }

    rpc Create(CreateRequest) returns (CreateResponse) {
        option (google.api.http) = {
            post: "/create"
            body: "*"
        };
    }

    rpc Pay(PayRequest) returns (PayResponse) {
        option (google.api.http) = {
            post: "/pay"
            body: "*"
        };
    }

    rpc Ledger(LedgerRequest) returns (LedgerResponse) {
        option (google.api.http) = {
            get: "/ledger"
        };
    }

}

message Account {
    string id = 1;
    google.protobuf.Timestamp created_at = 2 [(gogoproto.stdtime) = true,(gogoproto.moretags) = "db:\"created_at\""];
    google.protobuf.Timestamp updated_at = 3 [(gogoproto.stdtime) = true,(gogoproto.moretags) = "db:\"updated_at\""];
    string address = 4;
    int64 balance = 5  [(gogoproto.jsontag) = "balance"];
    int64 balance_in = 6 [(gogoproto.jsontag) = "balance_in",(gogoproto.moretags) = "db:\"balance_in\""];
    int64 balance_out = 7 [(gogoproto.jsontag) = "balance_out",(gogoproto.moretags) = "db:\"balance_out\""];
}

message LedgerRecord {
    string id = 1;
    string account_id = 2 [(gogoproto.moretags) = "db:\"account_id\""];
    google.protobuf.Timestamp created_at = 3 [(gogoproto.stdtime) = true,(gogoproto.moretags) = "db:\"created_at\""];
    google.protobuf.Timestamp updated_at = 4 [(gogoproto.stdtime) = true,(gogoproto.moretags) = "db:\"updated_at\""];
    google.protobuf.Timestamp expires_at = 5 [(gogoproto.stdtime) = true,(gogoproto.moretags) = "db:\"expires_at\""];
    enum Status {
        PENDING = 0;
        COMPLETED = 1;
        EXPIRED = 2;
        FAILED = 3;
    }
    Status status = 6;
    enum Type {
        BTC = 0;
        LIGHTNING = 1;
    }
    Type type = 7;
    enum Direction {
        IN = 0;
        OUT = 1;
    }
    Direction direction = 8;
    int64 value = 9 [(gogoproto.jsontag) = "value"];
    string memo = 10 [(gogoproto.jsontag) = "memo"];;
    string request = 11 [(gogoproto.jsontag) = "request"];;
}

message DecodeRequest {
    string request = 1;
}

// These are copied from the lnrpc definition - we may eventually just include this
message DecodeResponse {
    string destination = 1 [(gogoproto.jsontag) = "destination"];
    string payment_hash = 2 [(gogoproto.jsontag) = "payment_hash"];
    int64 num_satoshis = 3 [(gogoproto.jsontag) = "num_satoshis"];
    int64 timestamp = 4 [(gogoproto.jsontag) = "timestamp"];
    int64 expiry = 5 [(gogoproto.jsontag) = "expiry"];
    string description = 6 [(gogoproto.jsontag) = "description"];
    string description_hash = 7 [(gogoproto.jsontag) = "description_hash"];
    string fallback_addr = 8 [(gogoproto.jsontag) = "fallback_addr"];
    int64 cltv_expiry = 9 [(gogoproto.jsontag) = "cltv_expiry"];
    repeated RouteHint route_hints = 10 [(gogoproto.jsontag) = "route_hints"];
}

message RouteHint {
    repeated HopHint hop_hints = 1 [(gogoproto.jsontag) = "hop_hints"];
}

message HopHint {
    string node_id = 1 [(gogoproto.jsontag) = "node_id"];
    uint64 chan_id = 2 [(gogoproto.jsontag) = "chan_id"];
    uint32 fee_base_msat = 3 [(gogoproto.jsontag) = "fee_base_msat"];
    uint32 fee_proportional_millionths = 4 [(gogoproto.jsontag) = "fee_proportional_millionths"];
    uint32 cltv_expiry_delta = 5 [(gogoproto.jsontag) = "cltv_expiry_delta"];
}

message CreateRequest {
    string memo = 1;
    int64 value = 2;
}

message CreateResponse {
    string request = 1;
}

message PayRequest {
    string request = 1;
    int64 value = 2;
}
message PayResponse {
    string error = 1;
}

message LedgerRequest {
}

message LedgerResponse {
    repeated LedgerRecord ledger = 1;
}