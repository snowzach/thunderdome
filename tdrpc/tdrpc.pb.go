// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tdrpc/tdrpc.proto

package tdrpc

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Ledger Record Status
type LedgerRecord_Status int32

const (
	PENDING   LedgerRecord_Status = 0
	COMPLETED LedgerRecord_Status = 1
	EXPIRED   LedgerRecord_Status = 2
	FAILED    LedgerRecord_Status = 3
)

var LedgerRecord_Status_name = map[int32]string{
	0: "PENDING",
	1: "COMPLETED",
	2: "EXPIRED",
	3: "FAILED",
}

var LedgerRecord_Status_value = map[string]int32{
	"PENDING":   0,
	"COMPLETED": 1,
	"EXPIRED":   2,
	"FAILED":    3,
}

func (LedgerRecord_Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{1, 0}
}

// Ledger Record Type
type LedgerRecord_Type int32

const (
	BTC       LedgerRecord_Type = 0
	LIGHTNING LedgerRecord_Type = 1
)

var LedgerRecord_Type_name = map[int32]string{
	0: "BTC",
	1: "LIGHTNING",
}

var LedgerRecord_Type_value = map[string]int32{
	"BTC":       0,
	"LIGHTNING": 1,
}

func (LedgerRecord_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{1, 1}
}

// Ledger Record Direction
type LedgerRecord_Direction int32

const (
	IN  LedgerRecord_Direction = 0
	OUT LedgerRecord_Direction = 1
)

var LedgerRecord_Direction_name = map[int32]string{
	0: "IN",
	1: "OUT",
}

var LedgerRecord_Direction_value = map[string]int32{
	"IN":  0,
	"OUT": 1,
}

func (LedgerRecord_Direction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{1, 2}
}

// Account
type Account struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Created at timestamp
	CreatedAt *time.Time `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty" db:"created_at"`
	// Update at timestamp
	UpdatedAt *time.Time `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty" db:"updated_at"`
	// The BTC address for the account
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	// The current balance
	Balance int64 `protobuf:"varint,5,opt,name=balance,proto3" json:"balance"`
	// The current pending incoming balance
	PendingIn int64 `protobuf:"varint,6,opt,name=pending_in,json=pendingIn,proto3" json:"pending_in" db:"pending_in"`
	// The current pending outgoing balance
	PendingOut int64 `protobuf:"varint,7,opt,name=pending_out,json=pendingOut,proto3" json:"pending_out" db:"pending_out"`
	// Is the account locked
	Locked bool `protobuf:"varint,8,opt,name=locked,proto3" json:"locked"`
}

func (m *Account) Reset()      { *m = Account{} }
func (*Account) ProtoMessage() {}
func (*Account) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{0}
}
func (m *Account) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Account) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Account.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Account) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Account.Merge(m, src)
}
func (m *Account) XXX_Size() int {
	return m.Size()
}
func (m *Account) XXX_DiscardUnknown() {
	xxx_messageInfo_Account.DiscardUnknown(m)
}

var xxx_messageInfo_Account proto.InternalMessageInfo

func (m *Account) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Account) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Account) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Account) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Account) GetBalance() int64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *Account) GetPendingIn() int64 {
	if m != nil {
		return m.PendingIn
	}
	return 0
}

func (m *Account) GetPendingOut() int64 {
	if m != nil {
		return m.PendingOut
	}
	return 0
}

func (m *Account) GetLocked() bool {
	if m != nil {
		return m.Locked
	}
	return false
}

// Ledger Record
type LedgerRecord struct {
	// The ID for the record. Lightning Payment Hash or BTC transaction
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The user account associated with the request
	AccountId string `protobuf:"bytes,2,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty" db:"account_id"`
	// Created at timestamp
	CreatedAt *time.Time `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty" db:"created_at"`
	// Update at timestamps
	UpdatedAt *time.Time `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty" db:"updated_at"`
	// Expires at timestamp
	ExpiresAt *time.Time `protobuf:"bytes,5,opt,name=expires_at,json=expiresAt,proto3,stdtime" json:"expires_at,omitempty" db:"expires_at"`
	// The record status
	Status LedgerRecord_Status `protobuf:"varint,6,opt,name=status,proto3,enum=tdrpc.LedgerRecord_Status" json:"status"`
	// The record type (BTC or LN)
	Type LedgerRecord_Type `protobuf:"varint,7,opt,name=type,proto3,enum=tdrpc.LedgerRecord_Type" json:"type"`
	// The direction of the transaction
	Direction LedgerRecord_Direction `protobuf:"varint,8,opt,name=direction,proto3,enum=tdrpc.LedgerRecord_Direction" json:"direction"`
	// Is this a generated request
	Generated bool `protobuf:"varint,9,opt,name=generated,proto3" json:"-"`
	// The amount of the transaction
	Value int64 `protobuf:"varint,10,opt,name=value,proto3" json:"value"`
	// The amount of the transaction
	NetworkFee int64 `protobuf:"varint,11,opt,name=network_fee,json=networkFee,proto3" json:"network_fee" db:"network_fee"`
	// The amount of the transaction
	ProcessingFee int64 `protobuf:"varint,12,opt,name=processing_fee,json=processingFee,proto3" json:"processing_fee" db:"processing_fee"`
	// The address index of the lightning request
	AddIndex uint64 `protobuf:"varint,13,opt,name=add_index,json=addIndex,proto3" json:"-" db:"add_index"`
	// An optional request memo
	Memo string `protobuf:"bytes,14,opt,name=memo,proto3" json:"memo"`
	// The lightning payment request
	Request string `protobuf:"bytes,15,opt,name=request,proto3" json:"request"`
	// Any error associated with the request
	Error string `protobuf:"bytes,16,opt,name=error,proto3" json:"error"`
	// Used to hide records that are duplicates
	Hidden bool `protobuf:"varint,17,opt,name=hidden,proto3" json:"-"`
}

func (m *LedgerRecord) Reset()      { *m = LedgerRecord{} }
func (*LedgerRecord) ProtoMessage() {}
func (*LedgerRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{1}
}
func (m *LedgerRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerRecord.Merge(m, src)
}
func (m *LedgerRecord) XXX_Size() int {
	return m.Size()
}
func (m *LedgerRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerRecord proto.InternalMessageInfo

func (m *LedgerRecord) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LedgerRecord) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func (m *LedgerRecord) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *LedgerRecord) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *LedgerRecord) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *LedgerRecord) GetStatus() LedgerRecord_Status {
	if m != nil {
		return m.Status
	}
	return PENDING
}

func (m *LedgerRecord) GetType() LedgerRecord_Type {
	if m != nil {
		return m.Type
	}
	return BTC
}

func (m *LedgerRecord) GetDirection() LedgerRecord_Direction {
	if m != nil {
		return m.Direction
	}
	return IN
}

func (m *LedgerRecord) GetGenerated() bool {
	if m != nil {
		return m.Generated
	}
	return false
}

func (m *LedgerRecord) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *LedgerRecord) GetNetworkFee() int64 {
	if m != nil {
		return m.NetworkFee
	}
	return 0
}

func (m *LedgerRecord) GetProcessingFee() int64 {
	if m != nil {
		return m.ProcessingFee
	}
	return 0
}

func (m *LedgerRecord) GetAddIndex() uint64 {
	if m != nil {
		return m.AddIndex
	}
	return 0
}

func (m *LedgerRecord) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *LedgerRecord) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *LedgerRecord) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *LedgerRecord) GetHidden() bool {
	if m != nil {
		return m.Hidden
	}
	return false
}

// Decode Request
type DecodeRequest struct {
	// The payment request to be decoded
	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *DecodeRequest) Reset()      { *m = DecodeRequest{} }
func (*DecodeRequest) ProtoMessage() {}
func (*DecodeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{2}
}
func (m *DecodeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecodeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecodeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecodeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecodeRequest.Merge(m, src)
}
func (m *DecodeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DecodeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DecodeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DecodeRequest proto.InternalMessageInfo

func (m *DecodeRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

// Decode Response
type DecodeResponse struct {
	// Desintation Node
	Destination string `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination"`
	// Payment hash for the request
	PaymentHash string `protobuf:"bytes,2,opt,name=payment_hash,json=paymentHash,proto3" json:"payment_hash"`
	// The number of Satoshis
	NumSatoshis int64 `protobuf:"varint,3,opt,name=num_satoshis,json=numSatoshis,proto3" json:"num_satoshis"`
	// The timestamp of the request
	Timestamp int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp"`
	// The expiration of the request
	Expiry int64 `protobuf:"varint,5,opt,name=expiry,proto3" json:"expiry"`
	// Optional description/memo of the request
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description"`
	// If the description is too long, a shorter hash of the description
	DescriptionHash string `protobuf:"bytes,7,opt,name=description_hash,json=descriptionHash,proto3" json:"description_hash"`
	// Fallback payment address
	FallbackAddr string `protobuf:"bytes,8,opt,name=fallback_addr,json=fallbackAddr,proto3" json:"fallback_addr"`
	CltvExpiry   int64  `protobuf:"varint,9,opt,name=cltv_expiry,json=cltvExpiry,proto3" json:"cltv_expiry"`
	// Route hints
	RouteHints []*RouteHint `protobuf:"bytes,10,rep,name=route_hints,json=routeHints,proto3" json:"route_hints,omitempty"`
}

func (m *DecodeResponse) Reset()      { *m = DecodeResponse{} }
func (*DecodeResponse) ProtoMessage() {}
func (*DecodeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{3}
}
func (m *DecodeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecodeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecodeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecodeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecodeResponse.Merge(m, src)
}
func (m *DecodeResponse) XXX_Size() int {
	return m.Size()
}
func (m *DecodeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DecodeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DecodeResponse proto.InternalMessageInfo

func (m *DecodeResponse) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func (m *DecodeResponse) GetPaymentHash() string {
	if m != nil {
		return m.PaymentHash
	}
	return ""
}

func (m *DecodeResponse) GetNumSatoshis() int64 {
	if m != nil {
		return m.NumSatoshis
	}
	return 0
}

func (m *DecodeResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *DecodeResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *DecodeResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DecodeResponse) GetDescriptionHash() string {
	if m != nil {
		return m.DescriptionHash
	}
	return ""
}

func (m *DecodeResponse) GetFallbackAddr() string {
	if m != nil {
		return m.FallbackAddr
	}
	return ""
}

func (m *DecodeResponse) GetCltvExpiry() int64 {
	if m != nil {
		return m.CltvExpiry
	}
	return 0
}

func (m *DecodeResponse) GetRouteHints() []*RouteHint {
	if m != nil {
		return m.RouteHints
	}
	return nil
}

// Route Hint
type RouteHint struct {
	// Hop Hints
	HopHints []*HopHint `protobuf:"bytes,1,rep,name=hop_hints,json=hopHints,proto3" json:"hop_hints"`
}

func (m *RouteHint) Reset()      { *m = RouteHint{} }
func (*RouteHint) ProtoMessage() {}
func (*RouteHint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{4}
}
func (m *RouteHint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RouteHint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RouteHint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RouteHint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouteHint.Merge(m, src)
}
func (m *RouteHint) XXX_Size() int {
	return m.Size()
}
func (m *RouteHint) XXX_DiscardUnknown() {
	xxx_messageInfo_RouteHint.DiscardUnknown(m)
}

var xxx_messageInfo_RouteHint proto.InternalMessageInfo

func (m *RouteHint) GetHopHints() []*HopHint {
	if m != nil {
		return m.HopHints
	}
	return nil
}

// Hop Hint
type HopHint struct {
	NodeId                    string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id"`
	ChanId                    uint64 `protobuf:"varint,2,opt,name=chan_id,json=chanId,proto3" json:"chan_id"`
	FeeBaseMsat               uint32 `protobuf:"varint,3,opt,name=fee_base_msat,json=feeBaseMsat,proto3" json:"fee_base_msat"`
	FeeProportionalMillionths uint32 `protobuf:"varint,4,opt,name=fee_proportional_millionths,json=feeProportionalMillionths,proto3" json:"fee_proportional_millionths"`
	CltvExpiryDelta           uint32 `protobuf:"varint,5,opt,name=cltv_expiry_delta,json=cltvExpiryDelta,proto3" json:"cltv_expiry_delta"`
}

func (m *HopHint) Reset()      { *m = HopHint{} }
func (*HopHint) ProtoMessage() {}
func (*HopHint) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{5}
}
func (m *HopHint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HopHint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HopHint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HopHint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HopHint.Merge(m, src)
}
func (m *HopHint) XXX_Size() int {
	return m.Size()
}
func (m *HopHint) XXX_DiscardUnknown() {
	xxx_messageInfo_HopHint.DiscardUnknown(m)
}

var xxx_messageInfo_HopHint proto.InternalMessageInfo

func (m *HopHint) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *HopHint) GetChanId() uint64 {
	if m != nil {
		return m.ChanId
	}
	return 0
}

func (m *HopHint) GetFeeBaseMsat() uint32 {
	if m != nil {
		return m.FeeBaseMsat
	}
	return 0
}

func (m *HopHint) GetFeeProportionalMillionths() uint32 {
	if m != nil {
		return m.FeeProportionalMillionths
	}
	return 0
}

func (m *HopHint) GetCltvExpiryDelta() uint32 {
	if m != nil {
		return m.CltvExpiryDelta
	}
	return 0
}

// Create Request
type CreateRequest struct {
	// An optional memo to include
	Memo string `protobuf:"bytes,1,opt,name=memo,proto3" json:"memo,omitempty"`
	// The amount for the payment request. (Zero means no pre-set value)
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// How long (in seconds) the payment request should be valid for
	Expires int64 `protobuf:"varint,3,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (m *CreateRequest) Reset()      { *m = CreateRequest{} }
func (*CreateRequest) ProtoMessage() {}
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{6}
}
func (m *CreateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateRequest.Merge(m, src)
}
func (m *CreateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateRequest proto.InternalMessageInfo

func (m *CreateRequest) GetMemo() string {
	if m != nil {
		return m.Memo
	}
	return ""
}

func (m *CreateRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CreateRequest) GetExpires() int64 {
	if m != nil {
		return m.Expires
	}
	return 0
}

// Create Response
type CreateResponse struct {
	// The payment request string
	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
}

func (m *CreateResponse) Reset()      { *m = CreateResponse{} }
func (*CreateResponse) ProtoMessage() {}
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{7}
}
func (m *CreateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateResponse.Merge(m, src)
}
func (m *CreateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateResponse proto.InternalMessageInfo

func (m *CreateResponse) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

// Pay Request
type PayRequest struct {
	// The payment request string
	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// The amount you wish to pay the payment request
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *PayRequest) Reset()      { *m = PayRequest{} }
func (*PayRequest) ProtoMessage() {}
func (*PayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{8}
}
func (m *PayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayRequest.Merge(m, src)
}
func (m *PayRequest) XXX_Size() int {
	return m.Size()
}
func (m *PayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PayRequest proto.InternalMessageInfo

func (m *PayRequest) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

func (m *PayRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Pay Response
type PayResponse struct {
	// The pay request result
	Result *LedgerRecord `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *PayResponse) Reset()      { *m = PayResponse{} }
func (*PayResponse) ProtoMessage() {}
func (*PayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{9}
}
func (m *PayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayResponse.Merge(m, src)
}
func (m *PayResponse) XXX_Size() int {
	return m.Size()
}
func (m *PayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PayResponse proto.InternalMessageInfo

func (m *PayResponse) GetResult() *LedgerRecord {
	if m != nil {
		return m.Result
	}
	return nil
}

// Ledger Request
type LedgerRequest struct {
	// Filter values (status, type, direction, request, generated, hidden)
	Filter map[string]string `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// After filtering for creattion time
	After *time.Time `protobuf:"bytes,2,opt,name=after,proto3,stdtime" json:"after,omitempty"`
	// Offset, Limit for pagination
	Offset int32 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *LedgerRequest) Reset()      { *m = LedgerRequest{} }
func (*LedgerRequest) ProtoMessage() {}
func (*LedgerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{10}
}
func (m *LedgerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerRequest.Merge(m, src)
}
func (m *LedgerRequest) XXX_Size() int {
	return m.Size()
}
func (m *LedgerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerRequest proto.InternalMessageInfo

func (m *LedgerRequest) GetFilter() map[string]string {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *LedgerRequest) GetAfter() *time.Time {
	if m != nil {
		return m.After
	}
	return nil
}

func (m *LedgerRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *LedgerRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// Ledger Response
type LedgerResponse struct {
	// The ledger records
	Ledger []*LedgerRecord `protobuf:"bytes,1,rep,name=ledger,proto3" json:"ledger"`
}

func (m *LedgerResponse) Reset()      { *m = LedgerResponse{} }
func (*LedgerResponse) ProtoMessage() {}
func (*LedgerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{11}
}
func (m *LedgerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerResponse.Merge(m, src)
}
func (m *LedgerResponse) XXX_Size() int {
	return m.Size()
}
func (m *LedgerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerResponse proto.InternalMessageInfo

func (m *LedgerResponse) GetLedger() []*LedgerRecord {
	if m != nil {
		return m.Ledger
	}
	return nil
}

// Withdraw Request
type WithdrawRequest struct {
	// The address to send funds to
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The amount to send (in satoshis)
	Value int64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// The target number of blocks this should be confirmed by
	Blocks int32 `protobuf:"varint,3,opt,name=blocks,proto3" json:"blocks,omitempty"`
	// A manual setting of fee per
	SatPerByte int64 `protobuf:"varint,4,opt,name=sat_per_byte,json=satPerByte,proto3" json:"sat_per_byte,omitempty"`
	// Estimate the withdraw request that would be created based on fee inputs
	Estimate bool `protobuf:"varint,5,opt,name=estimate,proto3" json:"estimate,omitempty"`
}

func (m *WithdrawRequest) Reset()      { *m = WithdrawRequest{} }
func (*WithdrawRequest) ProtoMessage() {}
func (*WithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{12}
}
func (m *WithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawRequest.Merge(m, src)
}
func (m *WithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawRequest proto.InternalMessageInfo

func (m *WithdrawRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WithdrawRequest) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *WithdrawRequest) GetBlocks() int32 {
	if m != nil {
		return m.Blocks
	}
	return 0
}

func (m *WithdrawRequest) GetSatPerByte() int64 {
	if m != nil {
		return m.SatPerByte
	}
	return 0
}

func (m *WithdrawRequest) GetEstimate() bool {
	if m != nil {
		return m.Estimate
	}
	return false
}

// Withdraw Response
type WithdrawResponse struct {
	// The withdraw request result
	Result *LedgerRecord `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *WithdrawResponse) Reset()      { *m = WithdrawResponse{} }
func (*WithdrawResponse) ProtoMessage() {}
func (*WithdrawResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{13}
}
func (m *WithdrawResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawResponse.Merge(m, src)
}
func (m *WithdrawResponse) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawResponse proto.InternalMessageInfo

func (m *WithdrawResponse) GetResult() *LedgerRecord {
	if m != nil {
		return m.Result
	}
	return nil
}

// CreateGenerated Request
type CreateGeneratedRequest struct {
	// Allow generated requests when the user account is locked
	AllowLocked bool `protobuf:"varint,1,opt,name=allow_locked,json=allowLocked,proto3" json:"allow_locked,omitempty"`
}

func (m *CreateGeneratedRequest) Reset()      { *m = CreateGeneratedRequest{} }
func (*CreateGeneratedRequest) ProtoMessage() {}
func (*CreateGeneratedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f1666a7b80216d36, []int{14}
}
func (m *CreateGeneratedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateGeneratedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateGeneratedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateGeneratedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateGeneratedRequest.Merge(m, src)
}
func (m *CreateGeneratedRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateGeneratedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateGeneratedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateGeneratedRequest proto.InternalMessageInfo

func (m *CreateGeneratedRequest) GetAllowLocked() bool {
	if m != nil {
		return m.AllowLocked
	}
	return false
}

func init() {
	proto.RegisterEnum("tdrpc.LedgerRecord_Status", LedgerRecord_Status_name, LedgerRecord_Status_value)
	proto.RegisterEnum("tdrpc.LedgerRecord_Type", LedgerRecord_Type_name, LedgerRecord_Type_value)
	proto.RegisterEnum("tdrpc.LedgerRecord_Direction", LedgerRecord_Direction_name, LedgerRecord_Direction_value)
	proto.RegisterType((*Account)(nil), "tdrpc.Account")
	proto.RegisterType((*LedgerRecord)(nil), "tdrpc.LedgerRecord")
	proto.RegisterType((*DecodeRequest)(nil), "tdrpc.DecodeRequest")
	proto.RegisterType((*DecodeResponse)(nil), "tdrpc.DecodeResponse")
	proto.RegisterType((*RouteHint)(nil), "tdrpc.RouteHint")
	proto.RegisterType((*HopHint)(nil), "tdrpc.HopHint")
	proto.RegisterType((*CreateRequest)(nil), "tdrpc.CreateRequest")
	proto.RegisterType((*CreateResponse)(nil), "tdrpc.CreateResponse")
	proto.RegisterType((*PayRequest)(nil), "tdrpc.PayRequest")
	proto.RegisterType((*PayResponse)(nil), "tdrpc.PayResponse")
	proto.RegisterType((*LedgerRequest)(nil), "tdrpc.LedgerRequest")
	proto.RegisterMapType((map[string]string)(nil), "tdrpc.LedgerRequest.FilterEntry")
	proto.RegisterType((*LedgerResponse)(nil), "tdrpc.LedgerResponse")
	proto.RegisterType((*WithdrawRequest)(nil), "tdrpc.WithdrawRequest")
	proto.RegisterType((*WithdrawResponse)(nil), "tdrpc.WithdrawResponse")
	proto.RegisterType((*CreateGeneratedRequest)(nil), "tdrpc.CreateGeneratedRequest")
}

func init() { proto.RegisterFile("tdrpc/tdrpc.proto", fileDescriptor_f1666a7b80216d36) }

var fileDescriptor_f1666a7b80216d36 = []byte{
	// 2353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xcf, 0x6f, 0xe3, 0xc6,
	0xf5, 0x37, 0x25, 0x59, 0xb2, 0x9e, 0x6c, 0x59, 0x3b, 0xd9, 0xec, 0x2a, 0x4a, 0x56, 0x62, 0xf8,
	0xfd, 0xb6, 0x70, 0x36, 0xb1, 0x44, 0x51, 0xbf, 0x1d, 0xa4, 0x81, 0x65, 0x7b, 0xbd, 0x6a, 0x36,
	0x1b, 0x97, 0xeb, 0x22, 0x41, 0x2e, 0xca, 0x88, 0x33, 0x92, 0x98, 0x95, 0x48, 0x96, 0x1c, 0xc5,
	0xab, 0x5b, 0xd1, 0x53, 0xd1, 0x53, 0x90, 0xde, 0x8a, 0x9e, 0xda, 0x4b, 0x7b, 0x6b, 0xff, 0x80,
	0x9e, 0x7a, 0xe9, 0x31, 0x68, 0x2f, 0x39, 0xa9, 0x8d, 0xd3, 0x43, 0x61, 0xa0, 0x40, 0xb0, 0x7f,
	0x41, 0xc1, 0xe1, 0x50, 0x94, 0xed, 0x4d, 0x37, 0x28, 0xda, 0x8b, 0xc8, 0xf7, 0xeb, 0xc3, 0xf7,
	0xe6, 0xfd, 0x98, 0x67, 0xc3, 0x0d, 0x46, 0x5c, 0xc7, 0xa8, 0xf0, 0xdf, 0xb2, 0xe3, 0xda, 0xcc,
	0x46, 0xeb, 0x9c, 0x28, 0xbc, 0x32, 0xb2, 0xed, 0xd1, 0x84, 0x56, 0xb0, 0x63, 0x56, 0xb0, 0x65,
	0xd9, 0x0c, 0x33, 0xd3, 0xb6, 0xbc, 0x40, 0xa9, 0xf0, 0xb2, 0x90, 0x72, 0x6a, 0x30, 0x1b, 0x56,
	0xe8, 0xd4, 0x61, 0x73, 0x21, 0x2c, 0x5d, 0x15, 0x32, 0x73, 0x4a, 0x3d, 0x86, 0xa7, 0x8e, 0x50,
	0xd8, 0x1d, 0x99, 0x6c, 0x3c, 0x1b, 0x94, 0x0d, 0x7b, 0x5a, 0x19, 0xd9, 0x23, 0x3b, 0xd2, 0xf4,
	0x29, 0x4e, 0xf0, 0x37, 0xa1, 0xfe, 0x06, 0x7f, 0x18, 0xbb, 0x23, 0x6a, 0xed, 0x7a, 0x67, 0x78,
	0x34, 0xa2, 0x6e, 0xc5, 0x76, 0xb8, 0x3b, 0xd7, 0x5d, 0x53, 0xfe, 0x18, 0x87, 0xd4, 0xbe, 0x61,
	0xd8, 0x33, 0x8b, 0xa1, 0x2c, 0xc4, 0x4c, 0x92, 0x97, 0x64, 0x69, 0x27, 0xad, 0xc7, 0x4c, 0x82,
	0x74, 0x00, 0xc3, 0xa5, 0x98, 0x51, 0xd2, 0xc7, 0x2c, 0x1f, 0x93, 0xa5, 0x9d, 0x8c, 0x56, 0x28,
	0x07, 0xee, 0x96, 0x43, 0x27, 0xca, 0xa7, 0xa1, 0xbb, 0xdd, 0xdb, 0x4f, 0x17, 0xa5, 0x6d, 0x32,
	0xd8, 0x53, 0x22, 0x2b, 0xe5, 0xd3, 0xbf, 0x96, 0x24, 0x3d, 0x2d, 0x18, 0xfb, 0xcc, 0xc7, 0x9c,
	0x39, 0x24, 0xc4, 0x8c, 0x7f, 0x7b, 0xcc, 0xc8, 0x4a, 0x60, 0x0a, 0xc6, 0x3e, 0x43, 0x79, 0x48,
	0x61, 0x42, 0x5c, 0xea, 0x79, 0xf9, 0x04, 0x77, 0x3e, 0x24, 0xd1, 0x1b, 0x90, 0x1a, 0xe0, 0x09,
	0xb6, 0x0c, 0x9a, 0x5f, 0x97, 0xa5, 0x9d, 0x78, 0x17, 0x7d, 0xb6, 0x9f, 0xf8, 0x45, 0x4c, 0x8a,
	0x5f, 0x2c, 0x4a, 0xa1, 0x44, 0x0f, 0x5f, 0xd0, 0x31, 0x80, 0x43, 0x2d, 0x62, 0x5a, 0xa3, 0xbe,
	0x69, 0xe5, 0x93, 0xdc, 0x60, 0x27, 0x32, 0x58, 0x11, 0x86, 0x4e, 0x45, 0x1c, 0x45, 0x4f, 0x0b,
	0xa2, 0x67, 0xa1, 0x77, 0x20, 0x13, 0x4a, 0xec, 0x19, 0xcb, 0xa7, 0x38, 0xd2, 0xdd, 0x08, 0x69,
	0x55, 0xfa, 0x74, 0x51, 0xca, 0xad, 0x42, 0xd9, 0x33, 0xa6, 0xe8, 0xe1, 0xa7, 0xde, 0x9b, 0x31,
	0xa4, 0x40, 0x72, 0x62, 0x1b, 0x8f, 0x29, 0xc9, 0x6f, 0xc8, 0xd2, 0xce, 0x46, 0x17, 0x2e, 0x16,
	0x25, 0xc1, 0xd1, 0xc5, 0x53, 0xf9, 0xc3, 0x06, 0x6c, 0x3e, 0xa0, 0x64, 0x44, 0x5d, 0x9d, 0x1a,
	0xb6, 0x4b, 0xae, 0xa5, 0x52, 0x03, 0xc0, 0x41, 0x96, 0xfb, 0x26, 0xe1, 0xa9, 0x4c, 0x77, 0x5f,
	0x08, 0xa3, 0x88, 0x24, 0x8a, 0x9e, 0x16, 0x44, 0xef, 0x6a, 0xfa, 0xe3, 0xff, 0x83, 0xf4, 0x27,
	0xfe, 0x2b, 0xe9, 0xd7, 0x01, 0xe8, 0x13, 0xc7, 0x74, 0xa9, 0xe7, 0x63, 0xae, 0x7f, 0x7b, 0xcc,
	0xc8, 0x4a, 0x60, 0x0a, 0xc6, 0x3e, 0x43, 0xdf, 0x83, 0xa4, 0xc7, 0x30, 0x9b, 0x79, 0xbc, 0x0c,
	0xb2, 0x5a, 0xa1, 0x1c, 0x34, 0xfd, 0xea, 0x21, 0x97, 0x1f, 0x71, 0x8d, 0x20, 0x21, 0x81, 0xb6,
	0x2e, 0x9e, 0xa8, 0x09, 0x09, 0x36, 0x77, 0x28, 0x4f, 0x7d, 0x56, 0xcb, 0x3f, 0xcb, 0xfa, 0x74,
	0xee, 0xd0, 0xee, 0xc6, 0xc5, 0xa2, 0xc4, 0x35, 0x75, 0xfe, 0x8b, 0xbe, 0x0f, 0x69, 0x62, 0xba,
	0xd4, 0xf0, 0x5b, 0x94, 0xe7, 0x3b, 0xab, 0xdd, 0x79, 0x96, 0xf1, 0x61, 0xa8, 0xd4, 0xdd, 0xba,
	0x58, 0x94, 0x22, 0x1b, 0x3d, 0x7a, 0x45, 0xff, 0x07, 0xe9, 0x11, 0xb5, 0xa8, 0xeb, 0x1f, 0x53,
	0x3e, 0xcd, 0x6b, 0x67, 0xfd, 0x62, 0x51, 0x92, 0x76, 0xf5, 0x88, 0x8f, 0xbe, 0x0b, 0xeb, 0x9f,
	0xe0, 0xc9, 0x8c, 0xe6, 0x81, 0x17, 0x69, 0x2e, 0x2a, 0xd2, 0x80, 0xaf, 0x07, 0x0f, 0xbf, 0xa4,
	0x2d, 0xca, 0xce, 0x6c, 0xf7, 0x71, 0x7f, 0x48, 0x69, 0x3e, 0x73, 0xad, 0xa4, 0x57, 0xa4, 0x61,
	0x49, 0xaf, 0xb0, 0x14, 0x1d, 0x04, 0x75, 0x8f, 0x52, 0xf4, 0x3e, 0x64, 0x1d, 0xd7, 0x36, 0xa8,
	0xe7, 0xf9, 0x15, 0xef, 0xe3, 0x6d, 0x72, 0x3c, 0x35, 0xc2, 0xbb, 0xa2, 0xf0, 0x74, 0x51, 0x7a,
	0x81, 0x77, 0xc9, 0x25, 0xae, 0xa2, 0x6f, 0x45, 0x0c, 0x1f, 0xb8, 0x0e, 0x69, 0x4c, 0x48, 0xdf,
	0xb4, 0x08, 0x7d, 0x92, 0xdf, 0x92, 0xa5, 0x9d, 0x44, 0xf7, 0x36, 0x0f, 0xf9, 0xe9, 0xa2, 0x94,
	0xe5, 0xa5, 0x1e, 0x4a, 0x15, 0x7d, 0x03, 0x13, 0xd2, 0xf3, 0x5f, 0xd1, 0x2b, 0x90, 0x98, 0xd2,
	0xa9, 0x9d, 0xcf, 0xf2, 0xb6, 0xe0, 0x29, 0xf1, 0x69, 0x9d, 0xff, 0xa2, 0xef, 0x40, 0xca, 0xa5,
	0x3f, 0x9a, 0x51, 0x8f, 0xe5, 0xb7, 0xb9, 0x42, 0xc6, 0x1f, 0x1e, 0x82, 0xa5, 0x87, 0x2f, 0xa8,
	0x04, 0xeb, 0xd4, 0x75, 0x6d, 0x37, 0x9f, 0xe3, 0x4a, 0x69, 0xff, 0x04, 0x39, 0x43, 0x0f, 0x1e,
	0xe8, 0x0e, 0x24, 0xc7, 0x26, 0x21, 0xd4, 0xca, 0xdf, 0x58, 0xcd, 0x85, 0x60, 0x2a, 0x6f, 0x41,
	0x32, 0xa8, 0x27, 0x94, 0x81, 0xd4, 0xc9, 0xd1, 0xc3, 0xc3, 0xde, 0xc3, 0xe3, 0xdc, 0x1a, 0xda,
	0x82, 0xf4, 0xc1, 0x7b, 0xef, 0x9e, 0x3c, 0x38, 0x3a, 0x3d, 0x3a, 0xcc, 0x49, 0xbe, 0xec, 0xe8,
	0x83, 0x93, 0x9e, 0x7e, 0x74, 0x98, 0x8b, 0x21, 0x80, 0xe4, 0xbd, 0xfd, 0xde, 0x83, 0xa3, 0xc3,
	0x5c, 0x5c, 0x29, 0x42, 0xc2, 0x2f, 0x28, 0x94, 0x82, 0x78, 0xf7, 0xf4, 0x20, 0x30, 0x7c, 0xd0,
	0x3b, 0xbe, 0x7f, 0xfa, 0xd0, 0xc7, 0x91, 0x94, 0x57, 0x20, 0xbd, 0xac, 0x19, 0x94, 0x84, 0x58,
	0xef, 0x61, 0x6e, 0xcd, 0x57, 0x7e, 0xef, 0x87, 0xa7, 0x39, 0x49, 0x79, 0x0d, 0xb6, 0x0e, 0xa9,
	0x61, 0x13, 0xaa, 0x8b, 0x68, 0xf2, 0x51, 0xd0, 0xc1, 0x10, 0x09, 0x49, 0xe5, 0xf7, 0x09, 0xc8,
	0x86, 0xba, 0x9e, 0x63, 0x5b, 0x1e, 0x45, 0x55, 0xc8, 0x10, 0xea, 0x31, 0xd3, 0xe2, 0x37, 0x4b,
	0x60, 0xd0, 0xdd, 0xf6, 0x8b, 0x62, 0x85, 0xad, 0xaf, 0x12, 0xa8, 0x06, 0x9b, 0x0e, 0x9e, 0x4f,
	0xa9, 0xc5, 0xfa, 0x63, 0xec, 0x8d, 0xc5, 0x44, 0xca, 0x5d, 0x2c, 0x4a, 0x97, 0xf8, 0x7a, 0x46,
	0x50, 0xf7, 0xb1, 0x37, 0x46, 0x7b, 0xb0, 0x69, 0xcd, 0xa6, 0x7d, 0x0f, 0x33, 0xdb, 0x1b, 0x9b,
	0x1e, 0x1f, 0x49, 0xf1, 0xee, 0xed, 0xa8, 0x68, 0x2e, 0x89, 0xf5, 0x8c, 0x35, 0x9b, 0x3e, 0x12,
	0x04, 0x7a, 0x1d, 0xd2, 0xcb, 0x7b, 0x95, 0xcf, 0x9d, 0x78, 0xd0, 0x39, 0x4b, 0xa6, 0x1e, 0xbd,
	0xfa, 0x23, 0x97, 0x8f, 0x82, 0xb9, 0xb8, 0x35, 0x78, 0x87, 0x07, 0x1c, 0x5d, 0x3c, 0x45, 0xd0,
	0x86, 0x6b, 0xf2, 0xab, 0x95, 0x8f, 0x89, 0x28, 0xe8, 0x90, 0xad, 0xaf, 0x12, 0xe8, 0x6d, 0xc8,
	0xad, 0x90, 0x41, 0xe0, 0x29, 0x6e, 0x77, 0xf3, 0xc2, 0x6f, 0x99, 0x2b, 0x32, 0x7d, 0x7b, 0x85,
	0xc3, 0x0f, 0xa0, 0x09, 0x5b, 0x43, 0x3c, 0x99, 0x0c, 0xb0, 0xf1, 0xb8, 0xef, 0x5f, 0x71, 0x7c,
	0x42, 0xa4, 0xbb, 0x37, 0x2e, 0x16, 0xa5, 0xcb, 0x02, 0x7d, 0x33, 0x24, 0xf7, 0x09, 0x71, 0x91,
	0x0a, 0x19, 0x63, 0xc2, 0x3e, 0xe9, 0x8b, 0xa0, 0xd2, 0x3c, 0x28, 0xee, 0xeb, 0x0a, 0x5b, 0x07,
	0x9f, 0x38, 0x0a, 0xa2, 0x7b, 0x00, 0x19, 0xd7, 0x9e, 0x31, 0xda, 0x1f, 0x9b, 0x16, 0xf3, 0xf2,
	0x20, 0xc7, 0x77, 0x32, 0x5a, 0x4e, 0x4c, 0x22, 0xdd, 0x97, 0xdc, 0x37, 0x2d, 0xd6, 0x7d, 0xe9,
	0x62, 0x51, 0x7a, 0x71, 0x45, 0xf1, 0x0d, 0x7b, 0x6a, 0x32, 0xbe, 0xdc, 0xe8, 0xe0, 0x86, 0x5a,
	0x9e, 0x72, 0x0c, 0xe9, 0xa5, 0x0d, 0xda, 0x83, 0xf4, 0xd8, 0x76, 0x04, 0xb0, 0xc4, 0x81, 0xb3,
	0x02, 0xf8, 0xbe, 0xed, 0x70, 0x58, 0x9e, 0x99, 0xa5, 0x92, 0xbe, 0x31, 0x0e, 0xf8, 0x9e, 0xf2,
	0xbb, 0x18, 0xa4, 0x84, 0x12, 0xfa, 0x7f, 0x48, 0x59, 0x36, 0xa1, 0xfd, 0xf0, 0x9e, 0x0b, 0xfa,
	0x52, 0xb0, 0xf4, 0xa4, 0xff, 0xd2, 0x23, 0xbe, 0x96, 0x31, 0xc6, 0x56, 0x78, 0xeb, 0x25, 0x02,
	0x2d, 0xc1, 0xd2, 0x93, 0xfe, 0x4b, 0x8f, 0xa0, 0x06, 0x6c, 0x0d, 0x29, 0xed, 0x0f, 0xb0, 0x47,
	0xfb, 0x53, 0x4f, 0xdc, 0x76, 0x5b, 0xe2, 0x60, 0x57, 0x05, 0x7a, 0x66, 0x48, 0x69, 0x17, 0x7b,
	0xf4, 0x5d, 0x0f, 0x33, 0xd4, 0x87, 0x97, 0x7d, 0xa9, 0xe3, 0xda, 0x8e, 0xed, 0xfa, 0x59, 0xc2,
	0x93, 0xfe, 0xd4, 0x9c, 0x4c, 0x4c, 0xdb, 0x62, 0xe3, 0x60, 0x19, 0xd9, 0xea, 0x96, 0x2e, 0x16,
	0xa5, 0x7f, 0xa7, 0xa6, 0xbf, 0x34, 0xa4, 0xf4, 0x64, 0x45, 0xf6, 0xee, 0x52, 0x84, 0xf6, 0xe1,
	0xc6, 0x4a, 0x86, 0xfa, 0x84, 0x4e, 0x18, 0xe6, 0x35, 0xb9, 0xd5, 0x7d, 0xf1, 0x62, 0x51, 0xba,
	0x2e, 0xd4, 0xb7, 0xa3, 0x24, 0x1e, 0xfa, 0x0c, 0x85, 0xc2, 0xd6, 0x01, 0xbf, 0x7e, 0xc3, 0xd6,
	0x46, 0x62, 0xda, 0x05, 0x7d, 0x1d, 0xcc, 0xb8, 0x3b, 0xe1, 0x2d, 0x10, 0xe3, 0xa5, 0x91, 0x12,
	0x2d, 0x15, 0x0e, 0xff, 0x57, 0x21, 0x25, 0xae, 0x46, 0xd1, 0x73, 0x4b, 0x85, 0x90, 0xaf, 0xdc,
	0x85, 0x6c, 0xf8, 0x19, 0x31, 0x15, 0xbe, 0x79, 0x84, 0x1c, 0x01, 0x9c, 0xe0, 0xf9, 0x73, 0x47,
	0xcd, 0x73, 0xbc, 0x52, 0xf6, 0x20, 0xc3, 0x61, 0xc4, 0xf7, 0x5e, 0x87, 0xa4, 0x4b, 0xbd, 0xd9,
	0x24, 0x80, 0xc9, 0x68, 0x2f, 0x3c, 0xe3, 0xde, 0xd4, 0x85, 0x8a, 0x72, 0x21, 0xc1, 0x56, 0x28,
	0x08, 0x3e, 0xd6, 0x86, 0xe4, 0xd0, 0x9c, 0x30, 0xea, 0x8a, 0x9a, 0x94, 0xaf, 0x98, 0x73, 0xad,
	0xf2, 0x3d, 0xae, 0x72, 0x64, 0x31, 0x7f, 0x12, 0x04, 0xfa, 0xa8, 0x09, 0xeb, 0x78, 0xe8, 0x1b,
	0x3e, 0x7f, 0x43, 0x4e, 0xf0, 0x3d, 0x23, 0x50, 0x47, 0xb7, 0x20, 0x69, 0x0f, 0x87, 0x1e, 0x0d,
	0xaa, 0x6d, 0x5d, 0x17, 0x14, 0xba, 0x09, 0xeb, 0x13, 0x73, 0x6a, 0x06, 0xeb, 0xd1, 0xba, 0x1e,
	0x10, 0x85, 0x0e, 0x64, 0x56, 0x3e, 0x8e, 0x72, 0x10, 0x7f, 0x4c, 0xe7, 0xe2, 0xc4, 0xfc, 0x57,
	0xdf, 0x2c, 0x3a, 0xad, 0xb4, 0x38, 0xa4, 0xbd, 0x58, 0x5b, 0x52, 0x7a, 0x90, 0x0d, 0xa3, 0x10,
	0x67, 0xd5, 0x82, 0xe4, 0x84, 0x73, 0x44, 0xb0, 0xcf, 0x3a, 0x2b, 0xb1, 0x68, 0x06, 0x1c, 0xf1,
	0x54, 0x7e, 0x2b, 0xc1, 0xf6, 0xfb, 0x26, 0x1b, 0x13, 0x17, 0x9f, 0xad, 0x24, 0x30, 0x5c, 0xbf,
	0xa5, 0xcb, 0xeb, 0xf7, 0x73, 0xca, 0xea, 0x16, 0x24, 0x07, 0xfe, 0x02, 0xeb, 0x85, 0x07, 0x10,
	0x50, 0xe8, 0x35, 0xd8, 0xf4, 0x30, 0xeb, 0x3b, 0xd4, 0xed, 0x0f, 0xe6, 0x8c, 0x8a, 0x71, 0xbd,
	0xb4, 0x06, 0x0f, 0xb3, 0x13, 0xea, 0x76, 0xe7, 0x8c, 0xa2, 0x02, 0x6c, 0xf8, 0xb7, 0xca, 0x14,
	0xb3, 0x60, 0xc3, 0xdf, 0xd0, 0x97, 0xb4, 0xf2, 0x36, 0xe4, 0x22, 0x57, 0xff, 0x93, 0x22, 0x79,
	0x13, 0x6e, 0x05, 0x35, 0x7d, 0x1c, 0xae, 0x4b, 0x61, 0xc8, 0xaf, 0xc2, 0x26, 0x9e, 0x4c, 0xec,
	0xb3, 0xbe, 0xd8, 0xcc, 0x25, 0xfe, 0xe9, 0x0c, 0xe7, 0x3d, 0xe0, 0x2c, 0xed, 0x57, 0x09, 0xc8,
	0x9e, 0x8e, 0x67, 0x16, 0xa1, 0x2e, 0xb1, 0xa7, 0x54, 0x3f, 0x39, 0x40, 0xf7, 0x00, 0x8e, 0x29,
	0x0b, 0xff, 0xda, 0xba, 0x75, 0xad, 0x4e, 0x8e, 0xfc, 0xc1, 0x59, 0x08, 0x87, 0xa1, 0xd0, 0x53,
	0x72, 0x3f, 0xf9, 0xcb, 0xdf, 0x7f, 0x1e, 0x03, 0xb4, 0x51, 0x11, 0xab, 0x39, 0xea, 0x41, 0x32,
	0xb8, 0x81, 0xd1, 0x4d, 0xa1, 0x7b, 0xe9, 0xf2, 0x2e, 0xbc, 0x78, 0x85, 0x1b, 0xc4, 0xae, 0x20,
	0x0e, 0xb4, 0xa9, 0xa4, 0x2a, 0x84, 0x0b, 0xf6, 0xa4, 0xbb, 0x3e, 0x54, 0x10, 0xe2, 0x12, 0xea,
	0xd2, 0xb0, 0x58, 0x42, 0x5d, 0xee, 0xed, 0x15, 0xa8, 0x60, 0xb5, 0xf7, 0xa1, 0xde, 0x82, 0xf8,
	0x09, 0x9e, 0xa3, 0x1b, 0xc2, 0x22, 0xea, 0xf0, 0x02, 0x5a, 0x65, 0x09, 0x84, 0x6d, 0x8e, 0x90,
	0x56, 0x12, 0x15, 0x07, 0xcf, 0x7d, 0xf3, 0x7b, 0x90, 0x0c, 0x92, 0xb0, 0xf4, 0xe4, 0x52, 0xe7,
	0x2d, 0x3d, 0xb9, 0x5c, 0xc9, 0x21, 0x0e, 0x4a, 0x55, 0x82, 0x0a, 0x45, 0x3f, 0x80, 0x8d, 0x30,
	0xeb, 0xe8, 0x96, 0xb0, 0xb9, 0x52, 0xb1, 0x85, 0xdb, 0xd7, 0xf8, 0x02, 0xed, 0x26, 0x47, 0xcb,
	0x2a, 0xe9, 0xca, 0x99, 0x10, 0xf9, 0xae, 0x7d, 0x00, 0xdb, 0x57, 0xea, 0x00, 0xdd, 0xb9, 0x74,
	0x2e, 0x57, 0xeb, 0xe3, 0x9b, 0x8e, 0x2d, 0x72, 0x36, 0x38, 0xb6, 0xee, 0x9f, 0x93, 0x9f, 0xed,
	0xff, 0x73, 0x1d, 0xdd, 0x82, 0xed, 0x95, 0x52, 0x91, 0xf5, 0x93, 0x03, 0x2d, 0x5e, 0x2d, 0xab,
	0x77, 0xa5, 0x98, 0x96, 0xc3, 0x8e, 0x33, 0x31, 0x0d, 0xbe, 0x35, 0x55, 0x3e, 0xf6, 0x6c, 0x6b,
	0xef, 0x1a, 0x47, 0x3f, 0x81, 0x78, 0x5d, 0xad, 0xa2, 0x1e, 0x1c, 0xeb, 0x94, 0xcd, 0x5c, 0x8b,
	0x12, 0xf9, 0x6c, 0x4c, 0x2d, 0x99, 0x8d, 0xa9, 0x3c, 0xf3, 0xa8, 0x2b, 0x13, 0x9b, 0x7a, 0xb2,
	0x65, 0x33, 0x79, 0x8c, 0x3f, 0xa1, 0xb2, 0x43, 0xdd, 0xa9, 0xe9, 0x79, 0xa6, 0x6d, 0xc9, 0xcc,
	0x96, 0xb1, 0xe1, 0xef, 0xcf, 0x5c, 0xd7, 0xa5, 0x9e, 0x3d, 0x73, 0x0d, 0x5a, 0xd6, 0xdf, 0xf4,
	0x11, 0xeb, 0xa8, 0x0e, 0x77, 0xaf, 0x23, 0x86, 0x5a, 0x11, 0x2a, 0x7d, 0x62, 0x7a, 0xac, 0x8c,
	0x92, 0xe0, 0xf7, 0x67, 0xea, 0xc3, 0x5f, 0x26, 0xe0, 0xd7, 0x12, 0xdc, 0x3c, 0x78, 0xb8, 0xbb,
	0x3f, 0x63, 0xe3, 0xdd, 0x93, 0xd9, 0xe0, 0x1d, 0x3a, 0x7f, 0xc4, 0x5c, 0xd3, 0x1a, 0xa1, 0x9f,
	0x49, 0x1b, 0x31, 0x64, 0xdd, 0xa7, 0x4f, 0x64, 0x6a, 0xf9, 0x35, 0x48, 0x64, 0xc3, 0x9e, 0x3a,
	0xfe, 0xb0, 0xa0, 0x44, 0x76, 0x66, 0x83, 0x89, 0x69, 0xc8, 0x8f, 0xe9, 0xbc, 0x2c, 0x1f, 0x3d,
	0xc1, 0x53, 0x67, 0x42, 0xf7, 0x64, 0x55, 0x53, 0x8d, 0x1a, 0x56, 0x69, 0x6b, 0xa0, 0xaa, 0x54,
	0x25, 0x6d, 0x62, 0x18, 0x06, 0x21, 0x9d, 0x5a, 0x75, 0xa0, 0x91, 0x66, 0xb5, 0x5d, 0x6f, 0xd7,
	0x3a, 0x5a, 0xbb, 0xd5, 0xd6, 0x3a, 0x2d, 0x3c, 0xa8, 0x37, 0x1a, 0x5a, 0x4b, 0x33, 0x0c, 0xdc,
	0x69, 0xd7, 0xd5, 0x6a, 0xbd, 0xde, 0x6c, 0xfb, 0x0a, 0x85, 0x67, 0xba, 0x22, 0xc7, 0xe0, 0xa7,
	0x31, 0xb8, 0x11, 0x8a, 0x1e, 0x99, 0x23, 0x0b, 0xb3, 0x99, 0x4b, 0xd1, 0x53, 0xdf, 0xc5, 0x2f,
	0xa4, 0x55, 0x1f, 0xbd, 0x50, 0x28, 0xdb, 0x43, 0x4e, 0xf8, 0xf6, 0xfe, 0x59, 0x7c, 0x14, 0x9a,
	0x2f, 0x47, 0xfc, 0x47, 0xf2, 0x98, 0x62, 0x42, 0xdd, 0x95, 0x08, 0x6a, 0x6a, 0xbd, 0xa1, 0x6a,
	0x5a, 0x55, 0x55, 0x31, 0x1d, 0x56, 0xdb, 0x8d, 0x6a, 0xb3, 0xd1, 0x30, 0x48, 0x93, 0xb6, 0x0c,
	0xc3, 0x68, 0xb5, 0xf0, 0xd0, 0xa8, 0x19, 0xa4, 0x69, 0xb4, 0x87, 0x2d, 0xdc, 0xe9, 0x10, 0xda,
	0x6e, 0x34, 0x1a, 0xad, 0xaa, 0x41, 0xb1, 0x46, 0x0c, 0xda, 0xa1, 0x9d, 0xfa, 0xa0, 0xda, 0x1a,
	0xd4, 0x3a, 0x9a, 0xa6, 0xb5, 0x87, 0xaa, 0xa6, 0xa9, 0xcd, 0x41, 0xad, 0x35, 0xac, 0x35, 0x6a,
	0x9d, 0x96, 0x5a, 0x6d, 0xd3, 0x41, 0xb3, 0x4e, 0x6a, 0xc3, 0x66, 0xbb, 0xd3, 0x69, 0xd0, 0x66,
	0x43, 0x55, 0x49, 0xcd, 0x68, 0x35, 0xab, 0x86, 0xd6, 0xae, 0x93, 0x26, 0x6e, 0xb6, 0xb0, 0xd6,
	0x50, 0x3b, 0x9d, 0x7a, 0x8b, 0xe0, 0x4e, 0xb5, 0xd6, 0x6a, 0x34, 0xda, 0xa4, 0x5a, 0xb8, 0x1e,
	0xb2, 0x1c, 0x03, 0x33, 0x3a, 0x89, 0x65, 0x28, 0xe8, 0x74, 0x23, 0x86, 0xde, 0x3c, 0x98, 0xb9,
	0x2e, 0xb5, 0x98, 0xec, 0x6f, 0xc7, 0xb2, 0x69, 0xc9, 0xfa, 0xbd, 0x83, 0x5a, 0xad, 0xd6, 0x59,
	0x89, 0x4f, 0x53, 0xd5, 0xe6, 0xae, 0x5a, 0xdd, 0x55, 0xb5, 0xd3, 0x6a, 0x63, 0x4f, 0xad, 0xef,
	0xa9, 0x8d, 0x0f, 0xd5, 0xd6, 0x9e, 0xaa, 0x16, 0xae, 0x63, 0xca, 0xb1, 0xcf, 0xbf, 0x2c, 0xae,
	0x7d, 0xf1, 0x65, 0x71, 0xed, 0xeb, 0x2f, 0x8b, 0xd2, 0x8f, 0xcf, 0x8b, 0xd2, 0x6f, 0xce, 0x8b,
	0xd2, 0x9f, 0xce, 0x8b, 0xd2, 0xe7, 0xe7, 0x45, 0xe9, 0x6f, 0xe7, 0x45, 0xe9, 0x1f, 0xe7, 0xc5,
	0xb5, 0xaf, 0xcf, 0x8b, 0x6b, 0x9f, 0x7e, 0x55, 0x5c, 0xfb, 0xfc, 0xab, 0xe2, 0xda, 0x17, 0x5f,
	0x15, 0xd7, 0x3e, 0x7c, 0x7d, 0x64, 0xb2, 0xb2, 0x61, 0x9b, 0x96, 0x65, 0x5a, 0x1f, 0xe3, 0xb2,
	0x45, 0x59, 0xc5, 0x5f, 0x6e, 0xa9, 0x45, 0x2a, 0x2c, 0x6a, 0x9c, 0xe0, 0x1f, 0x73, 0x83, 0x24,
	0x1f, 0xa8, 0xb5, 0x7f, 0x05, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x15, 0x5c, 0x95, 0xae, 0x13, 0x00,
	0x00,
}

func (this *Account) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Account)
	if !ok {
		that2, ok := that.(Account)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Balance != that1.Balance {
		return false
	}
	if this.PendingIn != that1.PendingIn {
		return false
	}
	if this.PendingOut != that1.PendingOut {
		return false
	}
	if this.Locked != that1.Locked {
		return false
	}
	return true
}
func (this *LedgerRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LedgerRecord)
	if !ok {
		that2, ok := that.(LedgerRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.AccountId != that1.AccountId {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	if that1.ExpiresAt == nil {
		if this.ExpiresAt != nil {
			return false
		}
	} else if !this.ExpiresAt.Equal(*that1.ExpiresAt) {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Direction != that1.Direction {
		return false
	}
	if this.Generated != that1.Generated {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.NetworkFee != that1.NetworkFee {
		return false
	}
	if this.ProcessingFee != that1.ProcessingFee {
		return false
	}
	if this.AddIndex != that1.AddIndex {
		return false
	}
	if this.Memo != that1.Memo {
		return false
	}
	if this.Request != that1.Request {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	if this.Hidden != that1.Hidden {
		return false
	}
	return true
}
func (this *DecodeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DecodeRequest)
	if !ok {
		that2, ok := that.(DecodeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Request != that1.Request {
		return false
	}
	return true
}
func (this *DecodeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DecodeResponse)
	if !ok {
		that2, ok := that.(DecodeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Destination != that1.Destination {
		return false
	}
	if this.PaymentHash != that1.PaymentHash {
		return false
	}
	if this.NumSatoshis != that1.NumSatoshis {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Expiry != that1.Expiry {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.DescriptionHash != that1.DescriptionHash {
		return false
	}
	if this.FallbackAddr != that1.FallbackAddr {
		return false
	}
	if this.CltvExpiry != that1.CltvExpiry {
		return false
	}
	if len(this.RouteHints) != len(that1.RouteHints) {
		return false
	}
	for i := range this.RouteHints {
		if !this.RouteHints[i].Equal(that1.RouteHints[i]) {
			return false
		}
	}
	return true
}
func (this *RouteHint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RouteHint)
	if !ok {
		that2, ok := that.(RouteHint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.HopHints) != len(that1.HopHints) {
		return false
	}
	for i := range this.HopHints {
		if !this.HopHints[i].Equal(that1.HopHints[i]) {
			return false
		}
	}
	return true
}
func (this *HopHint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HopHint)
	if !ok {
		that2, ok := that.(HopHint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NodeId != that1.NodeId {
		return false
	}
	if this.ChanId != that1.ChanId {
		return false
	}
	if this.FeeBaseMsat != that1.FeeBaseMsat {
		return false
	}
	if this.FeeProportionalMillionths != that1.FeeProportionalMillionths {
		return false
	}
	if this.CltvExpiryDelta != that1.CltvExpiryDelta {
		return false
	}
	return true
}
func (this *CreateRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateRequest)
	if !ok {
		that2, ok := that.(CreateRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Memo != that1.Memo {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Expires != that1.Expires {
		return false
	}
	return true
}
func (this *CreateResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateResponse)
	if !ok {
		that2, ok := that.(CreateResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Request != that1.Request {
		return false
	}
	return true
}
func (this *PayRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PayRequest)
	if !ok {
		that2, ok := that.(PayRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Request != that1.Request {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	return true
}
func (this *PayResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PayResponse)
	if !ok {
		that2, ok := that.(PayResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *LedgerRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LedgerRequest)
	if !ok {
		that2, ok := that.(LedgerRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Filter) != len(that1.Filter) {
		return false
	}
	for i := range this.Filter {
		if this.Filter[i] != that1.Filter[i] {
			return false
		}
	}
	if that1.After == nil {
		if this.After != nil {
			return false
		}
	} else if !this.After.Equal(*that1.After) {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	return true
}
func (this *LedgerResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*LedgerResponse)
	if !ok {
		that2, ok := that.(LedgerResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Ledger) != len(that1.Ledger) {
		return false
	}
	for i := range this.Ledger {
		if !this.Ledger[i].Equal(that1.Ledger[i]) {
			return false
		}
	}
	return true
}
func (this *WithdrawRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WithdrawRequest)
	if !ok {
		that2, ok := that.(WithdrawRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Address != that1.Address {
		return false
	}
	if this.Value != that1.Value {
		return false
	}
	if this.Blocks != that1.Blocks {
		return false
	}
	if this.SatPerByte != that1.SatPerByte {
		return false
	}
	if this.Estimate != that1.Estimate {
		return false
	}
	return true
}
func (this *WithdrawResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*WithdrawResponse)
	if !ok {
		that2, ok := that.(WithdrawResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Result.Equal(that1.Result) {
		return false
	}
	return true
}
func (this *CreateGeneratedRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateGeneratedRequest)
	if !ok {
		that2, ok := that.(CreateGeneratedRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.AllowLocked != that1.AllowLocked {
		return false
	}
	return true
}
func (this *Account) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&tdrpc.Account{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	s = append(s, "PendingIn: "+fmt.Sprintf("%#v", this.PendingIn)+",\n")
	s = append(s, "PendingOut: "+fmt.Sprintf("%#v", this.PendingOut)+",\n")
	s = append(s, "Locked: "+fmt.Sprintf("%#v", this.Locked)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LedgerRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 21)
	s = append(s, "&tdrpc.LedgerRecord{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "AccountId: "+fmt.Sprintf("%#v", this.AccountId)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	s = append(s, "ExpiresAt: "+fmt.Sprintf("%#v", this.ExpiresAt)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "Generated: "+fmt.Sprintf("%#v", this.Generated)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "NetworkFee: "+fmt.Sprintf("%#v", this.NetworkFee)+",\n")
	s = append(s, "ProcessingFee: "+fmt.Sprintf("%#v", this.ProcessingFee)+",\n")
	s = append(s, "AddIndex: "+fmt.Sprintf("%#v", this.AddIndex)+",\n")
	s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "Hidden: "+fmt.Sprintf("%#v", this.Hidden)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DecodeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdrpc.DecodeRequest{")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DecodeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&tdrpc.DecodeResponse{")
	s = append(s, "Destination: "+fmt.Sprintf("%#v", this.Destination)+",\n")
	s = append(s, "PaymentHash: "+fmt.Sprintf("%#v", this.PaymentHash)+",\n")
	s = append(s, "NumSatoshis: "+fmt.Sprintf("%#v", this.NumSatoshis)+",\n")
	s = append(s, "Timestamp: "+fmt.Sprintf("%#v", this.Timestamp)+",\n")
	s = append(s, "Expiry: "+fmt.Sprintf("%#v", this.Expiry)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "DescriptionHash: "+fmt.Sprintf("%#v", this.DescriptionHash)+",\n")
	s = append(s, "FallbackAddr: "+fmt.Sprintf("%#v", this.FallbackAddr)+",\n")
	s = append(s, "CltvExpiry: "+fmt.Sprintf("%#v", this.CltvExpiry)+",\n")
	if this.RouteHints != nil {
		s = append(s, "RouteHints: "+fmt.Sprintf("%#v", this.RouteHints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RouteHint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdrpc.RouteHint{")
	if this.HopHints != nil {
		s = append(s, "HopHints: "+fmt.Sprintf("%#v", this.HopHints)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HopHint) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tdrpc.HopHint{")
	s = append(s, "NodeId: "+fmt.Sprintf("%#v", this.NodeId)+",\n")
	s = append(s, "ChanId: "+fmt.Sprintf("%#v", this.ChanId)+",\n")
	s = append(s, "FeeBaseMsat: "+fmt.Sprintf("%#v", this.FeeBaseMsat)+",\n")
	s = append(s, "FeeProportionalMillionths: "+fmt.Sprintf("%#v", this.FeeProportionalMillionths)+",\n")
	s = append(s, "CltvExpiryDelta: "+fmt.Sprintf("%#v", this.CltvExpiryDelta)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&tdrpc.CreateRequest{")
	s = append(s, "Memo: "+fmt.Sprintf("%#v", this.Memo)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Expires: "+fmt.Sprintf("%#v", this.Expires)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdrpc.CreateResponse{")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PayRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&tdrpc.PayRequest{")
	s = append(s, "Request: "+fmt.Sprintf("%#v", this.Request)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PayResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdrpc.PayResponse{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LedgerRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&tdrpc.LedgerRequest{")
	keysForFilter := make([]string, 0, len(this.Filter))
	for k, _ := range this.Filter {
		keysForFilter = append(keysForFilter, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFilter)
	mapStringForFilter := "map[string]string{"
	for _, k := range keysForFilter {
		mapStringForFilter += fmt.Sprintf("%#v: %#v,", k, this.Filter[k])
	}
	mapStringForFilter += "}"
	if this.Filter != nil {
		s = append(s, "Filter: "+mapStringForFilter+",\n")
	}
	s = append(s, "After: "+fmt.Sprintf("%#v", this.After)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *LedgerResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdrpc.LedgerResponse{")
	if this.Ledger != nil {
		s = append(s, "Ledger: "+fmt.Sprintf("%#v", this.Ledger)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WithdrawRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&tdrpc.WithdrawRequest{")
	s = append(s, "Address: "+fmt.Sprintf("%#v", this.Address)+",\n")
	s = append(s, "Value: "+fmt.Sprintf("%#v", this.Value)+",\n")
	s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	s = append(s, "SatPerByte: "+fmt.Sprintf("%#v", this.SatPerByte)+",\n")
	s = append(s, "Estimate: "+fmt.Sprintf("%#v", this.Estimate)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *WithdrawResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdrpc.WithdrawResponse{")
	if this.Result != nil {
		s = append(s, "Result: "+fmt.Sprintf("%#v", this.Result)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateGeneratedRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&tdrpc.CreateGeneratedRequest{")
	s = append(s, "AllowLocked: "+fmt.Sprintf("%#v", this.AllowLocked)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTdrpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ThunderdomeRPCClient is the client API for ThunderdomeRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ThunderdomeRPCClient interface {
	// Get/Create user account
	GetAccount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Account, error)
	// Decode a payment request
	Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeResponse, error)
	// Create a payment request
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Pay a request
	Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error)
	// Get request ledger
	Ledger(ctx context.Context, in *LedgerRequest, opts ...grpc.CallOption) (*LedgerResponse, error)
	// Withdraw funds
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error)
	// Create a auto-generated payment request with no value. If one exist already, return that.
	CreateGenerated(ctx context.Context, in *CreateGeneratedRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type thunderdomeRPCClient struct {
	cc *grpc.ClientConn
}

func NewThunderdomeRPCClient(cc *grpc.ClientConn) ThunderdomeRPCClient {
	return &thunderdomeRPCClient{cc}
}

func (c *thunderdomeRPCClient) GetAccount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Account, error) {
	out := new(Account)
	err := c.cc.Invoke(ctx, "/tdrpc.ThunderdomeRPC/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeRPCClient) Decode(ctx context.Context, in *DecodeRequest, opts ...grpc.CallOption) (*DecodeResponse, error) {
	out := new(DecodeResponse)
	err := c.cc.Invoke(ctx, "/tdrpc.ThunderdomeRPC/Decode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeRPCClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/tdrpc.ThunderdomeRPC/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeRPCClient) Pay(ctx context.Context, in *PayRequest, opts ...grpc.CallOption) (*PayResponse, error) {
	out := new(PayResponse)
	err := c.cc.Invoke(ctx, "/tdrpc.ThunderdomeRPC/Pay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeRPCClient) Ledger(ctx context.Context, in *LedgerRequest, opts ...grpc.CallOption) (*LedgerResponse, error) {
	out := new(LedgerResponse)
	err := c.cc.Invoke(ctx, "/tdrpc.ThunderdomeRPC/Ledger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeRPCClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawResponse, error) {
	out := new(WithdrawResponse)
	err := c.cc.Invoke(ctx, "/tdrpc.ThunderdomeRPC/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thunderdomeRPCClient) CreateGenerated(ctx context.Context, in *CreateGeneratedRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/tdrpc.ThunderdomeRPC/CreateGenerated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThunderdomeRPCServer is the server API for ThunderdomeRPC service.
type ThunderdomeRPCServer interface {
	// Get/Create user account
	GetAccount(context.Context, *empty.Empty) (*Account, error)
	// Decode a payment request
	Decode(context.Context, *DecodeRequest) (*DecodeResponse, error)
	// Create a payment request
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Pay a request
	Pay(context.Context, *PayRequest) (*PayResponse, error)
	// Get request ledger
	Ledger(context.Context, *LedgerRequest) (*LedgerResponse, error)
	// Withdraw funds
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawResponse, error)
	// Create a auto-generated payment request with no value. If one exist already, return that.
	CreateGenerated(context.Context, *CreateGeneratedRequest) (*CreateResponse, error)
}

func RegisterThunderdomeRPCServer(s *grpc.Server, srv ThunderdomeRPCServer) {
	s.RegisterService(&_ThunderdomeRPC_serviceDesc, srv)
}

func _ThunderdomeRPC_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeRPCServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdrpc.ThunderdomeRPC/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeRPCServer).GetAccount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThunderdomeRPC_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeRPCServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdrpc.ThunderdomeRPC/Decode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeRPCServer).Decode(ctx, req.(*DecodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThunderdomeRPC_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeRPCServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdrpc.ThunderdomeRPC/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeRPCServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThunderdomeRPC_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeRPCServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdrpc.ThunderdomeRPC/Pay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeRPCServer).Pay(ctx, req.(*PayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThunderdomeRPC_Ledger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LedgerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeRPCServer).Ledger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdrpc.ThunderdomeRPC/Ledger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeRPCServer).Ledger(ctx, req.(*LedgerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThunderdomeRPC_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeRPCServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdrpc.ThunderdomeRPC/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeRPCServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThunderdomeRPC_CreateGenerated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGeneratedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThunderdomeRPCServer).CreateGenerated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tdrpc.ThunderdomeRPC/CreateGenerated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThunderdomeRPCServer).CreateGenerated(ctx, req.(*CreateGeneratedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThunderdomeRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tdrpc.ThunderdomeRPC",
	HandlerType: (*ThunderdomeRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _ThunderdomeRPC_GetAccount_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _ThunderdomeRPC_Decode_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ThunderdomeRPC_Create_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _ThunderdomeRPC_Pay_Handler,
		},
		{
			MethodName: "Ledger",
			Handler:    _ThunderdomeRPC_Ledger_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _ThunderdomeRPC_Withdraw_Handler,
		},
		{
			MethodName: "CreateGenerated",
			Handler:    _ThunderdomeRPC_CreateGenerated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tdrpc/tdrpc.proto",
}

func (m *Account) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Account) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n1, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)))
		n2, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Balance != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Balance))
	}
	if m.PendingIn != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.PendingIn))
	}
	if m.PendingOut != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.PendingOut))
	}
	if m.Locked {
		dAtA[i] = 0x40
		i++
		if m.Locked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *LedgerRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.AccountId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.AccountId)))
		i += copy(dAtA[i:], m.AccountId)
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)))
		n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.UpdatedAt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)))
		n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ExpiresAt != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)))
		n5, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.Status != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Status))
	}
	if m.Type != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Type))
	}
	if m.Direction != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Direction))
	}
	if m.Generated {
		dAtA[i] = 0x48
		i++
		if m.Generated {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Value != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Value))
	}
	if m.NetworkFee != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.NetworkFee))
	}
	if m.ProcessingFee != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.ProcessingFee))
	}
	if m.AddIndex != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.AddIndex))
	}
	if len(m.Memo) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Memo)))
		i += copy(dAtA[i:], m.Memo)
	}
	if len(m.Request) > 0 {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x82
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	if m.Hidden {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.Hidden {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DecodeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecodeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	return i, nil
}

func (m *DecodeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecodeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Destination) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Destination)))
		i += copy(dAtA[i:], m.Destination)
	}
	if len(m.PaymentHash) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.PaymentHash)))
		i += copy(dAtA[i:], m.PaymentHash)
	}
	if m.NumSatoshis != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.NumSatoshis))
	}
	if m.Timestamp != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Timestamp))
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Expiry))
	}
	if len(m.Description) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Description)))
		i += copy(dAtA[i:], m.Description)
	}
	if len(m.DescriptionHash) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.DescriptionHash)))
		i += copy(dAtA[i:], m.DescriptionHash)
	}
	if len(m.FallbackAddr) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.FallbackAddr)))
		i += copy(dAtA[i:], m.FallbackAddr)
	}
	if m.CltvExpiry != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.CltvExpiry))
	}
	if len(m.RouteHints) > 0 {
		for _, msg := range m.RouteHints {
			dAtA[i] = 0x52
			i++
			i = encodeVarintTdrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RouteHint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RouteHint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.HopHints) > 0 {
		for _, msg := range m.HopHints {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTdrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *HopHint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HopHint) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.NodeId)))
		i += copy(dAtA[i:], m.NodeId)
	}
	if m.ChanId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.ChanId))
	}
	if m.FeeBaseMsat != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.FeeBaseMsat))
	}
	if m.FeeProportionalMillionths != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.FeeProportionalMillionths))
	}
	if m.CltvExpiryDelta != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.CltvExpiryDelta))
	}
	return i, nil
}

func (m *CreateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Memo) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Memo)))
		i += copy(dAtA[i:], m.Memo)
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Value))
	}
	if m.Expires != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Expires))
	}
	return i, nil
}

func (m *CreateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	return i, nil
}

func (m *PayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Request) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Request)))
		i += copy(dAtA[i:], m.Request)
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Value))
	}
	return i, nil
}

func (m *PayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Result.Size()))
		n6, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *LedgerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Filter) > 0 {
		for k, _ := range m.Filter {
			dAtA[i] = 0xa
			i++
			v := m.Filter[k]
			mapSize := 1 + len(k) + sovTdrpc(uint64(len(k))) + 1 + len(v) + sovTdrpc(uint64(len(v)))
			i = encodeVarintTdrpc(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintTdrpc(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintTdrpc(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.After != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.After)))
		n7, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.After, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Offset != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Offset))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Limit))
	}
	return i, nil
}

func (m *LedgerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ledger) > 0 {
		for _, msg := range m.Ledger {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTdrpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.Value != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Value))
	}
	if m.Blocks != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Blocks))
	}
	if m.SatPerByte != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.SatPerByte))
	}
	if m.Estimate {
		dAtA[i] = 0x28
		i++
		if m.Estimate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *WithdrawResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTdrpc(dAtA, i, uint64(m.Result.Size()))
		n8, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *CreateGeneratedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateGeneratedRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AllowLocked {
		dAtA[i] = 0x8
		i++
		if m.AllowLocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeVarintTdrpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Account) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovTdrpc(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovTdrpc(uint64(m.Balance))
	}
	if m.PendingIn != 0 {
		n += 1 + sovTdrpc(uint64(m.PendingIn))
	}
	if m.PendingOut != 0 {
		n += 1 + sovTdrpc(uint64(m.PendingOut))
	}
	if m.Locked {
		n += 2
	}
	return n
}

func (m *LedgerRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	l = len(m.AccountId)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTdrpc(uint64(m.Status))
	}
	if m.Type != 0 {
		n += 1 + sovTdrpc(uint64(m.Type))
	}
	if m.Direction != 0 {
		n += 1 + sovTdrpc(uint64(m.Direction))
	}
	if m.Generated {
		n += 2
	}
	if m.Value != 0 {
		n += 1 + sovTdrpc(uint64(m.Value))
	}
	if m.NetworkFee != 0 {
		n += 1 + sovTdrpc(uint64(m.NetworkFee))
	}
	if m.ProcessingFee != 0 {
		n += 1 + sovTdrpc(uint64(m.ProcessingFee))
	}
	if m.AddIndex != 0 {
		n += 1 + sovTdrpc(uint64(m.AddIndex))
	}
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 2 + l + sovTdrpc(uint64(l))
	}
	if m.Hidden {
		n += 3
	}
	return n
}

func (m *DecodeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	return n
}

func (m *DecodeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Destination)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	l = len(m.PaymentHash)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.NumSatoshis != 0 {
		n += 1 + sovTdrpc(uint64(m.NumSatoshis))
	}
	if m.Timestamp != 0 {
		n += 1 + sovTdrpc(uint64(m.Timestamp))
	}
	if m.Expiry != 0 {
		n += 1 + sovTdrpc(uint64(m.Expiry))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	l = len(m.DescriptionHash)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	l = len(m.FallbackAddr)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.CltvExpiry != 0 {
		n += 1 + sovTdrpc(uint64(m.CltvExpiry))
	}
	if len(m.RouteHints) > 0 {
		for _, e := range m.RouteHints {
			l = e.Size()
			n += 1 + l + sovTdrpc(uint64(l))
		}
	}
	return n
}

func (m *RouteHint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HopHints) > 0 {
		for _, e := range m.HopHints {
			l = e.Size()
			n += 1 + l + sovTdrpc(uint64(l))
		}
	}
	return n
}

func (m *HopHint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.ChanId != 0 {
		n += 1 + sovTdrpc(uint64(m.ChanId))
	}
	if m.FeeBaseMsat != 0 {
		n += 1 + sovTdrpc(uint64(m.FeeBaseMsat))
	}
	if m.FeeProportionalMillionths != 0 {
		n += 1 + sovTdrpc(uint64(m.FeeProportionalMillionths))
	}
	if m.CltvExpiryDelta != 0 {
		n += 1 + sovTdrpc(uint64(m.CltvExpiryDelta))
	}
	return n
}

func (m *CreateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Memo)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovTdrpc(uint64(m.Value))
	}
	if m.Expires != 0 {
		n += 1 + sovTdrpc(uint64(m.Expires))
	}
	return n
}

func (m *CreateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	return n
}

func (m *PayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Request)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovTdrpc(uint64(m.Value))
	}
	return n
}

func (m *PayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTdrpc(uint64(l))
	}
	return n
}

func (m *LedgerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Filter) > 0 {
		for k, v := range m.Filter {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTdrpc(uint64(len(k))) + 1 + len(v) + sovTdrpc(uint64(len(v)))
			n += mapEntrySize + 1 + sovTdrpc(uint64(mapEntrySize))
		}
	}
	if m.After != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.After)
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovTdrpc(uint64(m.Offset))
	}
	if m.Limit != 0 {
		n += 1 + sovTdrpc(uint64(m.Limit))
	}
	return n
}

func (m *LedgerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ledger) > 0 {
		for _, e := range m.Ledger {
			l = e.Size()
			n += 1 + l + sovTdrpc(uint64(l))
		}
	}
	return n
}

func (m *WithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTdrpc(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovTdrpc(uint64(m.Value))
	}
	if m.Blocks != 0 {
		n += 1 + sovTdrpc(uint64(m.Blocks))
	}
	if m.SatPerByte != 0 {
		n += 1 + sovTdrpc(uint64(m.SatPerByte))
	}
	if m.Estimate {
		n += 2
	}
	return n
}

func (m *WithdrawResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovTdrpc(uint64(l))
	}
	return n
}

func (m *CreateGeneratedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllowLocked {
		n += 2
	}
	return n
}

func sovTdrpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTdrpc(x uint64) (n int) {
	return sovTdrpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Account) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Account{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Balance:` + fmt.Sprintf("%v", this.Balance) + `,`,
		`PendingIn:` + fmt.Sprintf("%v", this.PendingIn) + `,`,
		`PendingOut:` + fmt.Sprintf("%v", this.PendingOut) + `,`,
		`Locked:` + fmt.Sprintf("%v", this.Locked) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LedgerRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LedgerRecord{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`AccountId:` + fmt.Sprintf("%v", this.AccountId) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`ExpiresAt:` + strings.Replace(fmt.Sprintf("%v", this.ExpiresAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`Generated:` + fmt.Sprintf("%v", this.Generated) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`NetworkFee:` + fmt.Sprintf("%v", this.NetworkFee) + `,`,
		`ProcessingFee:` + fmt.Sprintf("%v", this.ProcessingFee) + `,`,
		`AddIndex:` + fmt.Sprintf("%v", this.AddIndex) + `,`,
		`Memo:` + fmt.Sprintf("%v", this.Memo) + `,`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`Hidden:` + fmt.Sprintf("%v", this.Hidden) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DecodeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DecodeRequest{`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DecodeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DecodeResponse{`,
		`Destination:` + fmt.Sprintf("%v", this.Destination) + `,`,
		`PaymentHash:` + fmt.Sprintf("%v", this.PaymentHash) + `,`,
		`NumSatoshis:` + fmt.Sprintf("%v", this.NumSatoshis) + `,`,
		`Timestamp:` + fmt.Sprintf("%v", this.Timestamp) + `,`,
		`Expiry:` + fmt.Sprintf("%v", this.Expiry) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`DescriptionHash:` + fmt.Sprintf("%v", this.DescriptionHash) + `,`,
		`FallbackAddr:` + fmt.Sprintf("%v", this.FallbackAddr) + `,`,
		`CltvExpiry:` + fmt.Sprintf("%v", this.CltvExpiry) + `,`,
		`RouteHints:` + strings.Replace(fmt.Sprintf("%v", this.RouteHints), "RouteHint", "RouteHint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RouteHint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RouteHint{`,
		`HopHints:` + strings.Replace(fmt.Sprintf("%v", this.HopHints), "HopHint", "HopHint", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HopHint) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HopHint{`,
		`NodeId:` + fmt.Sprintf("%v", this.NodeId) + `,`,
		`ChanId:` + fmt.Sprintf("%v", this.ChanId) + `,`,
		`FeeBaseMsat:` + fmt.Sprintf("%v", this.FeeBaseMsat) + `,`,
		`FeeProportionalMillionths:` + fmt.Sprintf("%v", this.FeeProportionalMillionths) + `,`,
		`CltvExpiryDelta:` + fmt.Sprintf("%v", this.CltvExpiryDelta) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateRequest{`,
		`Memo:` + fmt.Sprintf("%v", this.Memo) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Expires:` + fmt.Sprintf("%v", this.Expires) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateResponse{`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PayRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PayRequest{`,
		`Request:` + fmt.Sprintf("%v", this.Request) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PayResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PayResponse{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "LedgerRecord", "LedgerRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LedgerRequest) String() string {
	if this == nil {
		return "nil"
	}
	keysForFilter := make([]string, 0, len(this.Filter))
	for k, _ := range this.Filter {
		keysForFilter = append(keysForFilter, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForFilter)
	mapStringForFilter := "map[string]string{"
	for _, k := range keysForFilter {
		mapStringForFilter += fmt.Sprintf("%v: %v,", k, this.Filter[k])
	}
	mapStringForFilter += "}"
	s := strings.Join([]string{`&LedgerRequest{`,
		`Filter:` + mapStringForFilter + `,`,
		`After:` + strings.Replace(fmt.Sprintf("%v", this.After), "Timestamp", "types.Timestamp", 1) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`}`,
	}, "")
	return s
}
func (this *LedgerResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&LedgerResponse{`,
		`Ledger:` + strings.Replace(fmt.Sprintf("%v", this.Ledger), "LedgerRecord", "LedgerRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WithdrawRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WithdrawRequest{`,
		`Address:` + fmt.Sprintf("%v", this.Address) + `,`,
		`Value:` + fmt.Sprintf("%v", this.Value) + `,`,
		`Blocks:` + fmt.Sprintf("%v", this.Blocks) + `,`,
		`SatPerByte:` + fmt.Sprintf("%v", this.SatPerByte) + `,`,
		`Estimate:` + fmt.Sprintf("%v", this.Estimate) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WithdrawResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WithdrawResponse{`,
		`Result:` + strings.Replace(fmt.Sprintf("%v", this.Result), "LedgerRecord", "LedgerRecord", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateGeneratedRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateGeneratedRequest{`,
		`AllowLocked:` + fmt.Sprintf("%v", this.AllowLocked) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTdrpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Account) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Account: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Account: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingIn", wireType)
			}
			m.PendingIn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingIn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingOut", wireType)
			}
			m.PendingOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingOut |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Locked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Locked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= LedgerRecord_Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= LedgerRecord_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			m.Direction = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Direction |= LedgerRecord_Direction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Generated", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Generated = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetworkFee", wireType)
			}
			m.NetworkFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NetworkFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProcessingFee", wireType)
			}
			m.ProcessingFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProcessingFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddIndex", wireType)
			}
			m.AddIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hidden", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Hidden = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecodeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecodeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecodeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecodeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecodeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecodeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Destination", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Destination = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSatoshis", wireType)
			}
			m.NumSatoshis = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSatoshis |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DescriptionHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DescriptionHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FallbackAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FallbackAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CltvExpiry", wireType)
			}
			m.CltvExpiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CltvExpiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteHints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RouteHints = append(m.RouteHints, &RouteHint{})
			if err := m.RouteHints[len(m.RouteHints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RouteHint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RouteHint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RouteHint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HopHints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HopHints = append(m.HopHints, &HopHint{})
			if err := m.HopHints[len(m.HopHints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HopHint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HopHint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HopHint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanId", wireType)
			}
			m.ChanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeBaseMsat", wireType)
			}
			m.FeeBaseMsat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeBaseMsat |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeProportionalMillionths", wireType)
			}
			m.FeeProportionalMillionths = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeeProportionalMillionths |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CltvExpiryDelta", wireType)
			}
			m.CltvExpiryDelta = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CltvExpiryDelta |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Memo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Memo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expires", wireType)
			}
			m.Expires = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expires |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Request = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &LedgerRecord{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTdrpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTdrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTdrpc
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTdrpc
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTdrpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTdrpc
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTdrpc
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTdrpc(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTdrpc
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Filter[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.After == nil {
				m.After = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.After, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ledger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ledger = append(m.Ledger, &LedgerRecord{})
			if err := m.Ledger[len(m.Ledger)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			m.Blocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Blocks |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SatPerByte", wireType)
			}
			m.SatPerByte = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SatPerByte |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Estimate = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdrpc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTdrpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &LedgerRecord{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateGeneratedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateGeneratedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateGeneratedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowLocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AllowLocked = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTdrpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTdrpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTdrpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTdrpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTdrpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTdrpc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTdrpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTdrpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTdrpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTdrpc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTdrpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTdrpc   = fmt.Errorf("proto: integer overflow")
)
