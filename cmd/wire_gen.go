// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package cmd

import (
	"context"
	"crypto/tls"
	"git.coinninja.net/backend/thunderdome/server"
	"git.coinninja.net/backend/thunderdome/store/postgres"
	"git.coinninja.net/backend/thunderdome/tdrpc"
	"git.coinninja.net/backend/thunderdome/tdrpcserver"
	"git.coinninja.net/backend/thunderdome/thunderdome"
	"git.coinninja.net/backend/thunderdome/txmonitor"
	"github.com/lightningnetwork/lnd/lnrpc"
	"github.com/lightningnetwork/lnd/macaroons"
	"github.com/spf13/viper"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/status"
	"gopkg.in/macaroon.v2"
	"io/ioutil"
	"net"
	"time"
)

import (
	_ "net/http/pprof"
)

// Injectors from wire.go:

func NewServer() (*server.Server, error) {
	serverServer, err := server.New()
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

func NewTDRPCServer() (tdrpc.ThunderdomeRPCServer, error) {
	store := NewStore()
	clientConn := NewLndGrpcClientConn()
	lightningClient := NewLightningClient(clientConn)
	thunderdomeRPCServer, err := tdrpcserver.NewTDRPCServer(store, lightningClient)
	if err != nil {
		return nil, err
	}
	return thunderdomeRPCServer, nil
}

func NewTXMonitor() (*txmonitor.TXMonitor, error) {
	store := NewStore()
	clientConn := NewLndGrpcClientConn()
	txMonitor, err := txmonitor.NewTXMonitor(store, clientConn)
	if err != nil {
		return nil, err
	}
	return txMonitor, nil
}

// wire.go:

// NewStore is the store for the application
func NewStore() thunderdome.Store {
	var store thunderdome.Store
	var err error
	switch viper.GetString("storage.type") {
	case "postgres":
		store, err = postgres.New()
	}
	if err != nil {
		logger.Fatalw("Database Error", "error", err)
	}
	return store
}

func NewLightningClient(conn *grpc.ClientConn) lnrpc.LightningClient {

	_, err := lnrpc.NewWalletUnlockerClient(conn).UnlockWallet(context.Background(), &lnrpc.UnlockWalletRequest{
		WalletPassword: []byte(viper.GetString("lnd.unlock_password")),
	})
	if err == nil {
		logger.Info("Wallet Unlocked")

		conn.Close()
		conn = NewLndGrpcClientConn()
	} else if status.Code(err) == codes.Unimplemented {

	} else {
		logger.Fatalf("Could not UnlockWallet: %v", err)
	}

	return lnrpc.NewLightningClient(conn)
}

// NewLndGrpcClientConn creates a new GRPC connection to LND
func NewLndGrpcClientConn() *grpc.ClientConn {

	dialOptions := []grpc.DialOption{grpc.WithTimeout(10 * time.Second), grpc.WithBlock()}

	if viper.GetBool("lnd.tls_insecure") {
		creds := credentials.NewTLS(&tls.Config{
			InsecureSkipVerify: true,
		})
		dialOptions = append(dialOptions, grpc.WithTransportCredentials(creds))
	} else {

		creds, err := credentials.NewClientTLSFromFile(viper.GetString("lnd.tls_cert"), viper.GetString("lnd.tls_host"))
		if err != nil {
			logger.Fatalw("Could not load credentials", "error", err)
		}
		dialOptions = append(dialOptions, grpc.WithTransportCredentials(creds))
	}

	macBytes, err := ioutil.ReadFile(viper.GetString("lnd.macaroon"))
	if err != nil {
		logger.Fatalw("Unable to read macaroon", "error", err)
	}

	mac := &macaroon.Macaroon{}
	if err = mac.UnmarshalBinary(macBytes); err != nil {
		logger.Fatalw("Unable to decode macaroon", "error", err)
	}

	cred := macaroons.NewMacaroonCredential(mac)
	dialOptions = append(dialOptions, grpc.WithPerRPCCredentials(cred))

	conn, err := grpc.Dial(net.JoinHostPort(viper.GetString("lnd.host"), viper.GetString("lnd.port")), dialOptions...)
	if err != nil {
		logger.Fatalw("Could not connect to lnd", "error", err, "host:port", net.JoinHostPort(viper.GetString("lnd.host"), viper.GetString("lnd.port")))
	}

	return conn

}
