variables:
  CONTAINER_BRANCH_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_REF_SLUG
  CONTAINER_LATEST_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:latest
  CONTAINER_TAGGED_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH:$CI_COMMIT_TAG
  DOCKER_HOST: tcp://127.0.0.1:2375

cache:
  paths:
    - .cache

stages:
  - test
  - build
  - testing
  - prod

.docker-build: &docker-build
  stage: build
  allow_failure: false
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  services:
    - docker:dind

# Common k8s elements
.k8s: &k8s
  image: google/cloud-sdk:latest
  allow_failure: false
  before_script:
    - echo -n "${__k8s_prod_sa_key}" | base64 -d > /tmp/key.json
    - gcloud auth activate-service-account --key-file /tmp/key.json
    - gcloud config set project coinninja-prod
    - gcloud config set compute/zone us-central1-c
    - gcloud container clusters get-credentials prod-01
    - kubectl config current-context

.k8s-deploy: &branch-deploy
  script: |
    export CURRENT_IMAGE=$(kubectl -n ${CI_ENVIRONMENT_SLUG}-public get deployment ${CI_PROJECT_NAME}-server -o=jsonpath='{$.spec.template.spec.containers[0].image}')
    if [[ "${CURRENT_IMAGE}" != "${CONTAINER_BRANCH_IMAGE}" ]]; then
      echo "current image '${CURRENT_IMAGE}' is not '${CONTAINER_BRANCH_IMAGE}'"
      kubectl -n ${CI_ENVIRONMENT_SLUG}-public set image deployment/${CI_PROJECT_NAME}-server ${CI_PROJECT_NAME}=${CONTAINER_BRANCH_IMAGE} --record
    else
      echo "current image '${CURRENT_IMAGE}' is correct. Patching..."
      kubectl --namespace=${CI_ENVIRONMENT_SLUG}-public patch deployment ${CI_PROJECT_NAME}-server -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}" --record
    fi
    kubectl -n ${CI_ENVIRONMENT_SLUG}-public rollout status deployment ${CI_PROJECT_NAME}-server -w
  only:
    - branches@backend/thunderdome
  except:
    - master
    - develop

.k8s-deploy: &tag-deploy
  script: |
    export CURRENT_IMAGE=$(kubectl -n ${CI_ENVIRONMENT_SLUG}-public get deployment ${CI_PROJECT_NAME}-server -o=jsonpath='{$.spec.template.spec.containers[0].image}')
    if [[ "${CURRENT_IMAGE}" != "${CONTAINER_TAGGED_IMAGE}" ]]; then
      echo "current image '${CURRENT_IMAGE}' is not '${CONTAINER_TAGGED_IMAGE}'"
      kubectl -n ${CI_ENVIRONMENT_SLUG}-public set image deployment/${CI_PROJECT_NAME}-server ${CI_PROJECT_NAME}=${CONTAINER_TAGGED_IMAGE} --record
    else
      echo "current image '${CURRENT_IMAGE}' is correct. Patching..."
      kubectl --namespace=${CI_ENVIRONMENT_SLUG}-public patch deployment ${CI_PROJECT_NAME}-server -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}" --record
    fi
    kubectl -n ${CI_ENVIRONMENT_SLUG}-public rollout status deployment ${CI_PROJECT_NAME}-server -w
  only:
    - tags@backend/thunderdome
  except:
    - branches

.k8s-deploy: &latest-deploy
  script: |
    export CURRENT_IMAGE=$(kubectl -n ${CI_ENVIRONMENT_SLUG}-public get deployment ${CI_PROJECT_NAME}-server -o=jsonpath='{$.spec.template.spec.containers[0].image}')
    if [[ "${CURRENT_IMAGE}" != "${CONTAINER_LATEST_IMAGE}" ]]; then
      echo "current image '${CURRENT_IMAGE}' is not '${CONTAINER_LATEST_IMAGE}'"
      kubectl -n ${CI_ENVIRONMENT_SLUG}-public set image deployment/${CI_PROJECT_NAME}-server ${CI_PROJECT_NAME}=${CONTAINER_LATEST_IMAGE} --record
    else
      echo "current image '${CURRENT_IMAGE}' is correct. Patching..."
      kubectl --namespace=${CI_ENVIRONMENT_SLUG}-public patch deployment ${CI_PROJECT_NAME}-server -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}" --record
    fi
    kubectl -n ${CI_ENVIRONMENT_SLUG}-public rollout status deployment ${CI_PROJECT_NAME}-server -w
  only:
    - develop@backend/thunderdome


test:
  stage: test
  image: golang:1.12-alpine3.9
  services:
    - name: postgres:9.6
      alias: postgresdb
  variables:
    STORAGE_HOST: localhost
    POSTGRES_DB: thunderdome
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
  script:
    - apk add --update-cache make git protobuf protobuf-dev curl
    - mkdir -p .cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"
    - cat /etc/hosts
    - export PATH=$PATH:$GOPATH/bin
    - timeout -t 60 sh -c 'until nc -z $0 $1; do sleep 1; done' localhost 5432
    - CGO_ENABLED=0 make test

latest:
  <<: *docker-build
  script:
    - docker build --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --pull --tag $CONTAINER_LATEST_IMAGE .
    - docker push $CONTAINER_LATEST_IMAGE
  only:
    - develop@backend/thunderdome

branch:
  <<: *docker-build
  script:
    - docker build --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --pull --tag $CONTAINER_BRANCH_IMAGE .
    - docker push $CONTAINER_BRANCH_IMAGE
  when: manual
  only:
    - branches@backend/thunderdome
  except:
    - master
    - develop
    - tags

tagged:
  <<: *docker-build
  script:
    - docker build --build-arg CI_JOB_TOKEN=$CI_JOB_TOKEN --pull --tag $CONTAINER_TAGGED_IMAGE .
    - docker push $CONTAINER_TAGGED_IMAGE
  only:
    - tags@backend/thunderdome
  except:
    - branches
    
# All of the deploy branches below have been disabled
.test-server:branch:
  <<: *k8s
  <<: *branch-deploy
  stage: testing
  environment:
    name: test
    url: https://api.${CI_ENVIRONMENT_SLUG}.coinninja.net/api/v1/block/info
  when: manual

.test-server:latest:
  <<: *k8s
  <<: *latest-deploy
  stage: testing
  environment:
    name: test
    url: https://api.${CI_ENVIRONMENT_SLUG}.coinninja.net/api/v1/block/info

.test-server:tag:
  <<: *k8s
  <<: *tag-deploy
  stage: testing
  environment:
    name: test
    url: https://api.${CI_ENVIRONMENT_SLUG}.coinninja.net/api/v1/block/info

.production-server:tagged:
  <<: *k8s
  <<: *tag-deploy
  stage: prod
  environment:
    name: prod
    url: https://api.coinninja.com/api/v1/block/info
  when: manual

